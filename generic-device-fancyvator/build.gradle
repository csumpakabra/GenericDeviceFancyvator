import java.nio.file.Paths
import java.nio.file.Path

apply plugin: 'com.android.application'


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.meandmyphone.genericdevicefancyvator"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    testImplementation 'org.mockito:mockito-core:2.18.3'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation project(path: ':generic-device-fancyvator-common')
}

final JSON_PROPERTY = "json"
final RES_PROPERTY = "res"

Path projectPath;
Path inputJsonPath;
List<Path> resourceFiles = new ArrayList<>();

task initializeBuildLwp() {
    project.logger.lifecycle("Initializing LWP build process, author: csumpakabra")
    projectPath = Paths.get(project.projectDir.toString())
    project.logger.lifecycle(String.format("ProjectPath resolved to: %s", projectPath.toString()))
    if (project.hasProperty(RES_PROPERTY)) {
        for (String fromFile : res.split(';')) {
            Path fromPath = Paths.get(fromFile)
            if (fromPath.toFile().exists()) {
                if (resourceFiles.contains(fromPath)) {
                    throw new InvalidUserDataException(String.format("Duplicate resource file: %s",
                            fromPath.toString()))
                }
                resourceFiles.add(fromPath)
            } else {
                throw new InvalidUserDataException(String.format("Misssing resource file: %s",
                        fromPath.toString()))
            }
            project.logger.lifecycle(String.format("Prepared resource file: %s for LWP build process",
                    fromPath.toString()))
        }
        project.logger.lifecycle(String.format("Prepared %d resource files!", resourceFiles.size()))
    } else {
        throw new InvalidUserDataException("Missing resources property!");
    }
    if (project.hasProperty(JSON_PROPERTY)) {
        inputJsonPath = Paths.get(json)
        if (inputJsonPath.toFile().exists()) {
            project.logger.lifecycle(String.format("Found inputJson at %s", inputJsonPath.toString()))
        } else {
            throw new InvalidUserDataException("Missing file, input json not found!");
        }
    } else {
        throw new InvalidUserDataException("Missing json property!");
    }
}

task getResources(type: Copy) {
    for (Path fromPath : resourceFiles) {
        Path toPath = projectPath.resolve("src/main/res/drawable-nodpi")
        from file(fromPath.toFile())
        into file(toPath.toFile())
        project.logger.lifecycle(String.format("Copied resource file from %s to %s", fromPath.toString(), toPath.toString()))
    }
}

task getInputJson(type: Copy) {
    Path toJsonPath = projectPath.resolve("src/main/res/raw")
    from file(inputJsonPath.toFile())
    into file(toJsonPath.toFile())
    rename(".*", "input.json")
    project.logger.lifecycle(String.format("Copied input json file from %s to %s, renamed to input.json",
            inputJsonPath.toString(), toJsonPath.toString()))
}

preBuild.dependsOn(getResources)
getResources.dependsOn(getInputJson)
getInputJson.dependsOn(initializeBuildLwp)
